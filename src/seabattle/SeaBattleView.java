package seabattle;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.LayoutManager;
import java.awt.Paint;
import java.awt.Rectangle;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;

/**
 * The application's main frame.
 */
public class SeaBattleView extends FrameView {

    public SeaBattleView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                //statusMessageLabel.setText("");
            }
        });
        
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SeaBattleApp.getApplication().getMainFrame();
            aboutBox = new SeaBattleAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SeaBattleApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(seabattle.SeaBattleApp.class).getContext().getResourceMap(SeaBattleView.class);
        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 306, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(191, 191, 191))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addContainerGap(326, Short.MAX_VALUE))
        );

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N
        menuBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                menuBarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                menuBarMouseExited(evt);
            }
        });

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        jMenuItem1.setLabel(resourceMap.getString("jMenuItem1.label")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem3);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(seabattle.SeaBattleApp.class).getContext().getActionMap(SeaBattleView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setLabel(resourceMap.getString("helpMenu.label")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        init();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        if(isPlan)
        {
            if(evt.getButton() == 3)
            {
                Rotate();
            }
            if(evt.getButton() == 1)
            {
                if(checkCollide(evt.getX(), evt.getY()) == 0)
                {
                    setShip(evt.getX(), evt.getY(), settedShip);
                }
            }
        }
        if(isAttack)
        {
            if(isHuman)
            {
                int res = Attack(evt.getX(), evt.getY());
                if(res == 0)
                    isHuman = true;
                //JOptionPane.showMessageDialog(mainPanel, "Human");
            }
            if(isHuman == false)
            {
                //JOptionPane.showMessageDialog(mainPanel, "AI");
                //AI();
                getAttacked();
            }
        }
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        // TODO add your handling code here:

    }//GEN-LAST:event_jPanel1MouseMoved

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
//        SaveGame();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
 //       LoadGame();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_fileMenuActionPerformed

    private void menuBarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBarMouseEntered
        // TODO add your handling code here:
        //if(mainTime.isRunning()) mainTime.stop();
    }//GEN-LAST:event_menuBarMouseEntered

    private void menuBarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBarMouseExited
        // TODO add your handling code here:
        
    }//GEN-LAST:event_menuBarMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables


    // <editor-fold defaultstate="collapsed" desc="Attack">
    int Attack(int x, int y) { // выстрел по противнику возвращет результат выстрела если 1 то промах
        Dimension current = getCell(x, y);  //нахождение ячейки выстрела
        if (current.width == 0 && current.height == 0) {
            return 1;
        }
        int _x = current.width;
        int _y = current.height;

        if (comShips[_x][_y] == 1) {
            comCell[_x][_y].setBackground(Color.red);
            comShips[_x][_y] = 5;
            int index = getShip(_x, _y, 2);

            byte life = (byte)(listComShips.get(index).getLife() - 1);
            listComShips.get(index).setLife(life);
            
            CheckShip(index, 2);

            
            return 0;
        } else
        if(comShips[_x][_y] ==0){
            isHuman = false;
            comCell[_x][_y].setBackground(Color.lightGray);
            comShips[_x][_y] = 3;
        }
        return 1;
    }

    void getAttacked() {    //атака компьютера рекурсия при попадании компьютера
        Dimension index = myAI.Attack(ownShips);
        int x = index.width;
        int y = index.height;

        if (ownShips[x][y] > 0 && ownShips[x][y] != 5 && ownShips[x][y] != 3) {
            arrCell[x][y].setBackground(Color.red);
            ownShips[x][y] = 5;

            int number = getShip(x, y, 1);

            byte life = (byte)(listMyShips.get(number).getLife() - 1);
            listMyShips.get(number).setLife(life);
            CheckShip(number, 1);

            getAttacked();
        }
        if (ownShips[x][y] == 0) {
            arrCell[x][y].setBackground(Color.lightGray);
            ownShips[x][y] = 3;
            isHuman = true;
        }
    }// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Kill&Get&Check ship">
    void KillShip(int index, int where) {   //"убивает корабль" т.е. isDead true который проверяется в условии выиигрыша или проигрыша
        if (where == 1) {   // и рисует крестики на том месте где корабль
            if (listMyShips.get(index).getLife() == 0) {
                int count = (int)listMyShips.get(index).getType();
                int x = listMyShips.get(index).getX();
                int y = listMyShips.get(index).getY();
                Ship.Rotation directional = listMyShips.get(index).getRotation();

                if (directional == Ship.Rotation.HORIZONTAL) {
                    for (int i = 0; i < count; i++) {
                        arrCell[x][y + i].DrawCross();
                        ownShips[x][y+i] = 4;
                    }
                    //JOptionPane.showMessageDialog(mainPanel, "Just killed "+count+" with "+directional);
                }

                if (directional == Ship.Rotation.VERTICAL) {
                    for (int i = 0; i < count; i++) {
                        arrCell[x + i][y].DrawCross();
                        ownShips[x+i][y] = 4;
                    }
                    //JOptionPane.showMessageDialog(mainPanel, "Just killed "+count+" with "+directional);
                }
            }
        } else if (where == 2) {
            if (listComShips.get(index).getLife() == 0) {
                int count = (int)listComShips.get(index).getType();
                int x = listComShips.get(index).getX();
                int y = listComShips.get(index).getY();
                Ship.Rotation directional = listComShips.get(index).getRotation();

                if (directional == Ship.Rotation.HORIZONTAL) {
                    for (int i = 0; i < count; i++) {
                        comCell[x][y + i].DrawCross();
                        comShips[x][y+i] = 4;
                    }
                    //JOptionPane.showMessageDialog(mainPanel, "Just killed "+count+" with "+directional);
                }

                if (directional == Ship.Rotation.VERTICAL) {
                    for (int i = 0; i < count; i++) {
                        comCell[x + i][y].DrawCross();
                        comShips[x+i][y] = 4;
                    }
                    //JOptionPane.showMessageDialog(mainPanel, "Just killed "+count+" with "+directional);
                }
            }
        }
    }

    void CheckShip(int number, int where) { //нужнадля проверки состояния корабля, убит или нет
        if (where == 1) {
            if (listMyShips.get(number).getLife() <= 0) {
                //listMyShips.get(number).isDead = false;
                KillShip(number, 1);       

            } /*else {
                listMyShips.get(number).isDead() = true;
                
            }*/
        }
        if (where == 2) {
            if (listComShips.get(number).getLife() <= 0) {
                KillShip(number, 2);
                //listComShips.get(number).isDead = false;

            } /*else {
                listComShips.get(number).isDead = true;
                
            }*/
        }
    }

    int getShip(int x, int y, int where) { // определяем в какой корабль попали
        if (where == 1) {   // возвращает индекс корабля из списка кораблей
            int count = listMyShips.size();

            for (int i = 0; i < count; i++) {
                int cellNum = listMyShips.get(i).getType();

                if (listMyShips.get(i).getRotation() == Ship.Rotation.VERTICAL) {
                    for (int j = 0; j < cellNum; j++) {
                        if (listMyShips.get(i).getX() + j == x && listMyShips.get(i).getY() == y) {
                            //JOptionPane.showMessageDialog(mainPanel, "Hello");
                            return i;
                        }
                    }
                }

                if (listMyShips.get(i).getRotation() == Ship.Rotation.HORIZONTAL) {
                    for (int j = 0; j < cellNum; j++) {

                        if (listMyShips.get(i).getX() == x && listMyShips.get(i).getY() + j == y) {
                            //JOptionPane.showMessageDialog(mainPanel, "Hello");
                            return i;
                        }

                    }
                }
            }
        }
        if (where == 2) {
            int count = listComShips.size();

            for (int i = 0; i < count; i++) {
                int cellNum = listComShips.get(i).getType();

                if (listComShips.get(i).getRotation() == Ship.Rotation.VERTICAL) {
                    for (int j = 0; j < cellNum; j++)//определение попадания в корабль!!!
                    {
                        if (listComShips.get(i).getX() + j == x && listComShips.get(i).getY() == y) {
                            //JOptionPane.showMessageDialog(mainPanel, "Hello");
                            return i;
                        }
                    }
                }

                if (listComShips.get(i).getRotation() == Ship.Rotation.HORIZONTAL) {
                    for (int j = 0; j < cellNum; j++) {

                        if (listComShips.get(i).getX() == x && listComShips.get(i).getY() + j == y) {
                            //JOptionPane.showMessageDialog(mainPanel, "Hello");
                            return i;
                        }
                    }
                }
            }
        }
        return -1;

    }// </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="rotate&checkCollide&nextShip">
    void Rotate() {
        settedShip.Rotate();
        if (settedShip.getRotation() == Ship.Rotation.HORIZONTAL) {
            jLabel1.setText("horizontal");

        }
        if (settedShip.getRotation() == Ship.Rotation.VERTICAL) {
            jLabel1.setText("down");

        }
    }

    void WriteOwn()
    {
        try
        {
            RandomAccessFile raf = new RandomAccessFile("own.txt", "rw");

            String ent = "\n";
            for(int i=0;i<11;i++)
            {
                for(int j=0;j<11;j++)
                    raf.writeBytes((int)ownShips[i][j]+" ");
                raf.writeBytes(ent);
                
            }
            raf.close();
        }catch(Exception e)
        {

        }
    }

    int checkCollide(int x, int y) {
        showShip();
        int cellNumber = settedShip.getType();
        Ship.Rotation direction = settedShip.getRotation();
        Dimension current;
        current = getCell(x, y);

        int xx = current.width, yy = current.height;

        if(cellNumber == 1)
        {
            int a=1;
            a++;
        }

        WriteOwn();



        if (direction == Ship.Rotation.HORIZONTAL) {
            try {
                for (int i = -1; i < cellNumber+1; i++) {
                    if (ownShips[xx + 1][yy + i] != 0) {//right side
                        return 1;

                    }

                }
            } catch (Exception e) {
                //return 0;
            }

            try {
                for (int i = -1; i < cellNumber+1; i++) {
                    if (ownShips[xx - 1][yy + i] != 0) {//left side
                        return 1;

                    }

                }
            } catch (Exception e) {
                //return 0;
            }

            try {
                for (int i = -1; i < 2; i++) {
                    if (ownShips[xx + i][yy - 1] != 0) {//top
                        return 1;

                    }

                }
            } catch (Exception e) {
                //return 0;
            }

            try {
                for (int i = -1; i < 2; i++) {
                    if (ownShips[xx + i][yy + cellNumber] != 0) {//bottom
                        return 1;

                    }

                }
            } catch (Exception e) {
                //return 0;
            }

        }
        if (direction == Ship.Rotation.VERTICAL) {
            try {
                for (int i = 0; i < cellNumber; i++) {
                    if (ownShips[xx + i][yy + 1] != 0) {
                        return 1;

                    }

                }
            } catch (Exception e) {
                //return 0;
            }

            try {
                for (int i = 0; i < cellNumber; i++) {
                    if (ownShips[xx + i][yy - 1] != 0) {
                        return 1;

                    }

                }
            } catch (Exception e) {
                //return 0;
            }

            try {
                for (int i = -1; i < 2; i++) {
                    if (ownShips[xx - 1][yy + i] != 0) {
                        return 1;

                    }

                }
            } catch (Exception e) {
                //return 0;
            }

            try {
                for (int i = -1; i < 2; i++) {
                    if (ownShips[xx + cellNumber][yy + i] != 0) {
                        return 1;

                    }

                }
            } catch (Exception e) {
                //return 0;
            }

        }
        return 0;
    }

    void showShip()
    {
        switch (counterOfShips) {
            case 0:
                settedShip.setType((byte) 4);
                break;
            case 1:
                settedShip.setType((byte) 3);
                break;
            case 2:
                settedShip.setType((byte) 3);
                break;
            case 3:
                settedShip.setType((byte) 2);
                break;
            case 4:
                settedShip.setType((byte) 2);
                break;
            case 5:
                settedShip.setType((byte) 2);
                break;
            case 6:
                settedShip.setType((byte) 1);
                break;
            case 7:
                settedShip.setType((byte) 1);
                break;
            case 8:
                settedShip.setType((byte) 1);
                break;
            //case 9: settedShip.setType((char)1);  break;
            default:
                /*isPlan = false;
                isAttack = true;
                jLabel1.setText("Attack you opponent");
                gameTime.start();*/
                break;
        }
    }

    void nextShip() {
        switch (counterOfShips) {
            case 0:
                settedShip.setType((byte) 4);
                counterOfShips++;
                break;
            case 1:
                settedShip.setType((byte) 3);
                counterOfShips++;
                break;
            case 2:
                settedShip.setType((byte) 3);
                counterOfShips++;
                break;
            case 3:
                settedShip.setType((byte) 2);
                counterOfShips++;
                break;
            case 4:
                settedShip.setType((byte) 2);
                counterOfShips++;
                break;
            case 5:
                settedShip.setType((byte) 2);
                counterOfShips++;
                break;
            case 6:
                settedShip.setType((byte) 1);
                counterOfShips++;
                break;
            case 7:
                settedShip.setType((byte) 1);
                counterOfShips++;
                break;
            case 8:
                settedShip.setType((byte) 1);
                counterOfShips++;
                break;
            //case 9: settedShip.setType((char)1); counterOfShips++; break;
            default:
                isPlan = false;
                isAttack = true;
                jLabel1.setText("Attack you opponent");
                gameTime.start();
                break;
        }
        showShip();
        counterOfShips++;
        if(counterOfShips > 9)
        {
            isPlan = false;
            isAttack = true;
            jLabel1.setText("Attack you opponent");
            gameTime.start();
        }
    }

    void setShip(int x, int y, Ship sh) {
        Dimension index = getCell(x, y);

        if (index.width == 0 && index.height == 0) {
            return;


        }
        nextShip();
        int _x = (int) index.getWidth(), _y = (int) index.getHeight();

        int numberCell = 1;

        switch (sh.getType()) {
            case 1:
                numberCell = 1;
                break;
            case 2:
                numberCell = 2;
                break;
            case 3:
                numberCell = 3;
                break;
            case 4:
                numberCell = 4;
                break;
            default:
                break;
        }

        settedShip.setX((char) _x);
        settedShip.setY((char) _y);

        if (sh.getRotation() == Ship.Rotation.HORIZONTAL) {
            for (int i = 0; i < numberCell; i++) {
                ownShips[_x][_y + i] = 1;
            }
            for (int i = 0; i < numberCell; i++) {
                arrCell[_x][_y + i].setBackground(Color.blue);
            }
        } else {
            for (int i = 0; i < numberCell; i++) {
                ownShips[_x + i][_y] = 1;
            }
            for (int i = 0; i < numberCell; i++) {
                arrCell[_x + i][_y].setBackground(Color.blue);

            }
        }

        /*Ship added = new Ship();
        added = settedShip;*/

        Ship added = new Ship();

        added.setType(settedShip.getType());
        added.setRotation(settedShip.getRotation());
        added.setX(settedShip.getX());
        added.setY(settedShip.getY());

        listMyShips.add(added);
    }// </editor-fold>

    int Win()
    {
        //String str = "";
        int count = listComShips.size();
        for(int i =0;i<count;i++)
        {
            if(listComShips.get(i).isDead() == false)
            {
                return 0;
            }
        }
        return 1;
    }

    int Lose()
    {
        int count = listMyShips.size();
        for(int i =0;i<count;i++)
        {
            if(listMyShips.get(i).isDead() == false)
                return 0;
        }
        return 1;
    }

    Dimension getCell(int x, int y)
    {
        if(isPlan)
        {
            for(int i=1;i<11;i++)
            {
                for(int j=1;j<11;j++)
                {
                    int _x = arrCell[j][i].getX();
                    int _y = arrCell[j][i].getY();
                    int _w = arrCell[j][i].getWidth();
                    int _h = arrCell[j][i].getHeight();

                    if(x > _x && x <_x+_w && y>_y && y<_y+_h)
                        return new Dimension(j, i);
                }
            }
            return new Dimension(0, 0);
        }
        if(isAttack)
        {
            for(int i=1;i<11;i++)
            {
                for(int j=1;j<11;j++)
                {
                    int _x = comCell[j][i].getX();
                    int _y = comCell[j][i].getY();
                    int _w = comCell[j][i].getWidth();
                    int _h = comCell[j][i].getHeight();

                    if(x > _x && x <_x+_w && y>_y && y<_y+_h)
                        return new Dimension(j, i);
                }
            }
            return new Dimension(0, 0);
        }
        return new Dimension(0, 0);
    }

  /*  void SaveResult()
    {
        String playerName;
        int time = (int) ((int) timePlayed * 0.5);
        do{
            playerName = JOptionPane.showInputDialog("Enter your name");
        }while(playerName == null);

        try
        {
            RandomAccessFile input = new RandomAccessFile("score.txt", "rw");
            input.seek(input.length());
            input.writeBytes(playerName+" "+time+"\n");
            input.close();
        }catch(Exception e)
        {

        }

        try
        {
            RandomAccessFile output = new RandomAccessFile("score.txt", "rw");
            String str;
            String mesg = "";
            while((str = output.readLine())!=null)
            {
                mesg += str+"\n";
            }

            JOptionPane.showMessageDialog(mainPanel, mesg);
        }catch(Exception e)
        {
            
        }



    }*/
/*
    void SaveGame()
    {
        if(isPlan)
        {
            JOptionPane.showMessageDialog(mainPanel, "Begin game firstly");
            return;
        }

        String file =null;

        do
        {
             file = JOptionPane.showInputDialog(mainPanel, "Enter filename(without extension): ");
        }while(file ==null);
        file = file+".txt";

        try
        {
            RandomAccessFile input = new RandomAccessFile(file, "rw");

            String ent = "\n";
            for(int i=0;i<11;i++)
            {
                for(int j=0;j<11;j++)
                    input.writeBytes((int)ownShips[i][j]+" ");
                input.writeBytes(ent);
            }

            ent = "\n";
            for(int i=0;i<11;i++)
            {
                for(int j=0;j<11;j++)
                    input.writeBytes((int)comShips[i][j]+" ");
                input.writeBytes(ent);
            }

            String str;
            for(int i =0;i<listMyShips.size();i++)
            {
                str =(int)listMyShips.get(i).getX()+"\n";
                input.writeBytes(str);

                str =(int)listMyShips.get(i).getY()+"\n";
                input.writeBytes(str);

                str = (Ship.ShipType)listMyShips.get(i).getType()+"\n";
                input.writeBytes(str);

                str = listMyShips.get(i).getRotation()+"\n";
                input.writeBytes(str);

                str = (byte)listMyShips.get(i).getLife()+"\n";
                input.writeBytes(str);
            }

            for(int i =0;i<listComShips.size();i++)
            {
                str =(int)listComShips.get(i).getX()+"\n";
                input.writeBytes(str);

                str =(int)listComShips.get(i).getY()+"\n";
                input.writeBytes(str);

                str = (int)listComShips.get(i).getType()+"\n";
                input.writeBytes(str);

                str = listComShips.get(i).getRotation()+"\n";
                input.writeBytes(str);

                if(i == listComShips.size()-1)
                    str = (int)listComShips.get(i).getLife()+"";
                else
                    str = (int)listComShips.get(i).getLife()+"\n";
                input.writeBytes(str);
            }

            input.close();

            JOptionPane.showMessageDialog(mainPanel, "Successfuly saved");
        }catch(Exception e)
        {

        }
    }*/

/*
    void LoadGame()     // загрузка игры(загрузка массивов из файлов и их распознование)
    {
        if(mainTime.isRunning()) mainTime.stop();
        if(gameTime.isRunning()) gameTime.stop();

        init();

        String file =null;

        do
        {
             file = JOptionPane.showInputDialog(mainPanel, "Enter filename(without extension): ");
        }while(file ==null);
        file = file+".txt";

        try
        {
            RandomAccessFile output = new RandomAccessFile(file, "rw");

            String str = "";
            myAI.getDefault();
                for(int j=0;j<11;j++)
                {
                    StringTokenizer strTok = null;
                    str = output.readLine();

                    strTok = new StringTokenizer(str, " ");

                    for(int i=0;i<11;i++)
                    {
                        int out = Integer.parseInt(strTok.nextToken());
                        ownShips[j][i] = (char)out;
                    }
                }

                
                str = "";
                for(int j=0;j<11;j++)
                {
                    StringTokenizer strTok = null;
                    str = output.readLine();

                    strTok = new StringTokenizer(str, " ");

                    for(int i=0;i<11;i++)
                    {
                        int out = Integer.parseInt(strTok.nextToken());
                        comShips[j][i] = (char)out;
                    }
                    
                }

                
                myAI.loadShips(comShips);
                myAI.WriteShips();

                listMyShips.clear();
                //listMyShips.removeAll(listMyShips);
                for(int i=0;i<10;i++)
                {
                    counterOfShips++;
                    Ship added = new Ship();

                    str = output.readLine();
                    int x = Integer.parseInt(str);
                    added.setX((char)x);

                    str = output.readLine();
                    int y = Integer.parseInt(str);
                    added.setY((char)y);

                    str = output.readLine();
                    int type = Integer.parseInt(str);
                    added.setType((char)type);

                    str = output.readLine();
                    added.setRotation(str.toCharArray()[0]);

                    str = output.readLine();
                    int life = Integer.parseInt(str);
                    added.setLife(life);

                    listMyShips.add(added);
                }

                listComShips.clear();
                for(int i=0;i<10;i++)
                {
                    myAI.counterOfShips++;
                    Ship added = new Ship();

                    str = output.readLine();
                    int x = Integer.parseInt(str);
                    added.setX((char)x);

                    str = output.readLine();
                    int y = Integer.parseInt(str);
                    added.setY((char)y);

                    int type = Integer.parseInt(output.readLine());
                    added.setType((char)type);

                    str = output.readLine();
                    added.setRotation(str.toCharArray()[0]);

                    str = output.readLine();
                    int life = Integer.parseInt(str);
                    added.setLife(life);

                    listComShips.add(added);
                }

                output.close();
                
                //myAI.setListShip(listComShips); не надо т.к. listComShip ссылается на ту же область памяти
               
                myAI.WriteShips();
                
                recognize();
                isPlan = false;
                isAttack = true;
                timePlayed = 0;
                gameTime.start();
                //JOptionPane.showMessageDialog(mainPanel, "OK");
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(mainPanel, "Error");
        }
    }

    void recognize()        //распознование загруженных массивови их отображение
    {
        for(int i =1;i<11;i++)
            for(int j =1;j<11;j++)
            {
                switch(ownShips[i][j])
                {
                    case 0: //not explored
                        arrCell[i][j].setBackground(Color.green);
                        break;
                    case 1: // hereis ship but not explored
                        arrCell[i][j].setBackground(Color.blue);
                        break;
                    case 3: // miss
                        arrCell[i][j].setBackground(Color.lightGray);
                        break;
                    case 4: //killed ship
                        int index = getShip(i, j, 1);
                        arrCell[i][j].setBackground(Color.red);
                        listMyShips.get(index).isDead = true;

                        comCell[i][j].DrawCross();
                        break;
                    case 5: //attacked ship
                        arrCell[i][j].setBackground(Color.red);
                        break;
                    default:
                        JOptionPane.showMessageDialog(mainPanel, "Error");
                        break;
                }
            }

        for(int i =1;i<11;i++)
            for(int j=1;j<11;j++)
            {
                switch(comShips[i][j])
                {
                    case 0: //not explored
                        comCell[i][j].setBackground(Color.green);
                        break;
                    case 1: // hereis ship but not explored
                        //comCell[i][j].setBackground(Color.blue);
                        break;
                    case 3: // miss
                        comCell[i][j].setBackground(Color.lightGray);
                        break;
                    case 4: //killed ship
                        int index = getShip(i, j, 2);
                        listComShips.get(index).isDead = true;

                        comCell[i][j].setBackground(Color.red);
                        comCell[i][j].DrawCross();
                        break;
                    case 5: //attacked ship
                        comCell[i][j].setBackground(Color.red);
                        break;
                    default:
                        JOptionPane.showMessageDialog(mainPanel, "Error");
                        break;
                }
            }
    }
*/
    // <editor-fold defaultstate="collapsed" desc="initialization">
    void init() {   //инициализация компонентов задание начальных условий
        counterOfShips = 0;
        isPlan = true;
        isAttack = false;
        isHuman = true;
        
        sizeMap = 11;

        allWidth = jPanel1.getWidth();
        allHeight = jPanel1.getHeight();

        ownMap = new Rectangle(0, 0, allWidth / 2, allHeight);
        conMap = new Rectangle(allWidth / 2, 0, allWidth, allHeight);

        //step = (int)ownMap.getWidth()/sizeMap;
        step = 25;

        jPanel1.setBackground(Color.lightGray);

        //**** Cells on own field
        for (int j = 1; j < 11; j++) {
            for (int i = 1; i < 11; i++) {
                ownShips[i][j] = 0;
            }

        }
        settedShip = new Ship();

        if (!isInit) {
            for (int j = 1; j < 11; j++) {
                for (int i = 1; i < 11; i++) {
                    Cell a = new Cell(step * j, step * i);
                    //a.setBackground(Color.green);
                    arrCell[i][j] = a;
                    Component add = jPanel1.add(a);

                    javax.swing.GroupLayout bb = new javax.swing.GroupLayout(a);
                    bb.setHorizontalGroup(bb.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 24, 25));
                    bb.setVerticalGroup(bb.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 24, 25));
                    a.setLayout(bb);
                }

            }
        } else {
            for (int j = 1; j < 11; j++) {
                for (int i = 1; i < 11; i++) {
                    arrCell[i][j].getDef();
                }

            }
        }

        listMyShips.clear();
        //****

        //**** Cells on computer field
        for (int j = 1; j < 11; j++) {
            for (int i = 1; i < 11; i++) {
                comShips[i][j] = 0;
            }

        }
        listComShips.clear();
        myAI.setShips();
      
        comShips = myAI.getShips();
        listComShips = myAI.getListShip();
/*
        try {
            myAI.WriteShips();
        } catch (Exception e) {

        }*/
        if (!isInit) {
            int startX = (int) conMap.getX() + 25;
            for (int j = 1; j < 11; j++) {
                for (int i = 1; i < 11; i++) {
                    Cell a = new Cell(step * j + startX, step * i);
                    //a.setBackground(Color.green);
                    comCell[i][j] = a;      //here I changed i and j location
                    Component add = jPanel1.add(a);

                    javax.swing.GroupLayout bb = new javax.swing.GroupLayout(a);
                    bb.setHorizontalGroup(bb.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 24, 25));
                    bb.setVerticalGroup(bb.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, 24, 25));
                    a.setLayout(bb);
                }

            }
        } else {
            for (int j = 1; j < 11; j++) {
                for (int i = 1; i < 11; i++) {
                    comCell[i][j].getDef();

                }

            }
        }
        //****


        jLabel1.setText("Plannig start set your ships");
        mainTime.start();
        isInit = true;
    }// </editor-fold>


    // <editor-fold defaultstate="collapsed" desc="Paint">
   
     void PaintGrid() {
        Graphics g = jPanel1.getGraphics();

        //***********own MAP
        int startX = step;
        int startY = step;
        int width = step * 11;

        for (int i = 1; i < sizeMap + 1; i++) {
            g.setColor(Color.BLACK);
            g.drawLine(i * step, startY, i * step, width);
        }

        for (int i = 1; i < sizeMap + 1; i++) {
            g.setColor(Color.BLACK);
            g.drawLine(startX, i * step, width, i * step);
        }

        //*************

        //***********competitor MAP
        startX = (int) conMap.getX() + startX;

        for (int i = 1; i < sizeMap + 1; i++) {
            g.setColor(Color.BLACK);
            g.drawLine(startX + i * step, startY, startX + i * step, width);
        }

        for (int i = 1; i < sizeMap + 1; i++) {
            g.setColor(Color.BLACK);
            g.drawLine(startX + step, i * step, startX + width, i * step);
        }

        //*************
    }

    void Paint() {
        PaintGrid();
    }// </editor-fold>

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private int allWidth, allHeight;
    Rectangle ownMap, conMap;
    private int sizeMap;    // count of cells
    private int step;

    private boolean isPlan = true;
    private boolean isAttack = false;
    private boolean isHuman = true;
    private boolean isInit = false;
    
    private Ship settedShip;

    private int counterOfShips = 0;
    private int timePlayed = 0;

    private Cell arrCell[][] = new Cell[11][11];
    private Cell comCell[][] = new Cell[11][11];

    private char ownShips[][] = new char[11][11];
    private char comShips[][] = new char[11][11];

    private AI myAI = new AI();

    private ArrayList<Ship> listMyShips = new ArrayList<Ship>();
    private ArrayList<Ship> listComShips = new ArrayList<Ship>();



    private Timer mainTime = new Timer(40, new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet.");
         
            Paint();
                //mainPanel.updateUI();
        }
    });

    private Timer gameTime = new Timer(500, new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet.");
            timePlayed++;
            if(Win() == 1)
            {
                JOptionPane.showMessageDialog(mainPanel, "You win!");
                mainTime.stop();
                jPanel1.getGraphics().setColor(Color.GRAY);
                jPanel1.setBackground(Color.GRAY);
                jPanel1.getGraphics().fillRect(0, 0, allWidth, allHeight);

                for(int i=1;i<11;i++)
                    for(int j=1;j<11;j++)
                    {
                        arrCell[j][i].setBackground(Color.GRAY);
                        arrCell[j][i].getDef();
                        comCell[j][i].setBackground(Color.GRAY);
                        comCell[j][i].getDef();
                    }
                gameTime.stop();
                //SaveResult();
            }
            if(Lose() == 1)
            {
                JOptionPane.showMessageDialog(mainPanel, "You lose!");
                mainTime.stop();
                jPanel1.getGraphics().setColor(Color.GRAY);
                jPanel1.getGraphics().fillRect(0, 0, allWidth, allHeight);
                for(int i=1;i<11;i++)
                    for(int j=1;j<11;j++)
                    {
                        arrCell[j][i].setBackground(Color.GRAY);
                        arrCell[j][i].getDef();
                        comCell[j][i].setBackground(Color.GRAY);
                        comCell[j][i].getDef();
                    }
                gameTime.stop();
            }
        }
    });

    
    private JDialog aboutBox;
}
